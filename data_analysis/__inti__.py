"""
__init__.py文件简介
作用：让一个呈结构化分布(以文件夹形式组织)的代码文件夹变成可以被导入import的软件包。


　　Python 定义了两种类型的包，常规包和命名空间包。
常规包是传统的包，因为它们存在于 Python 3.2 和更早的版本中。
一个常规包通常被实现为一个包含__init__.py 文件的目录。
当一个常规包被导入时，这个__init__.py文件被隐式执行，它所定义的对象被绑定到包的名字空间中。

这是Python官方文档中对__init__.py文件的描述，
其实它的意思很简单，就是说Python文件都是按照目录当作不同的模块来组织的，这个目录被认为是Python包目录，
Python会通过搜索该目录下的文件来导入相关的模块。
但是并不是所有的目录都会被搜索添加，只有当目录中包含__init__.py文件时，这个目录才会被Python当作是一个包目录，
进而搜索添加里面的文件。这样做可以让编程者自己控制哪些目录可以被Python导入成包。

当某个目录中包含__init__.py文件时，Python在引入这个模块之前，会首先执行这个文件。因此，这个文件也可以被编程者用来控制定义包级别的变量。

综上所述，__init__.py文件最主要的作用是2个：

当目录下包含这个文件时，Python会将其当作成包目录，进而可以使用import xx.xx的方式导入目录下的文件或者模块。
使用__init__.py文件可以控制模块导入时的变量和内容，便于编程者的控制。


"""